(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Triad;

Triad = require('./triad.coffee');

window.app = new Triad();

jQuery(function() {
  return app.render();
});



},{"./triad.coffee":3}],2:[function(require,module,exports){
module.exports = {
  TICK_MS: 25,
  FADE_MS: 4000,
  SHAPE_SIZE: 200
};



},{}],3:[function(require,module,exports){
var Triad, constants,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

constants = require('./constants.coffee');

Triad = (function() {
  function Triad() {
    this.tick = __bind(this.tick, this);
  }

  Triad.prototype.render = function() {
    this.svg = d3.select('body').append('svg');
    this.shapes = [];
    this.generator = this.shapeFactory();
    return this.tick();
  };

  Triad.prototype.shapeFactory = function() {
    var x, y;
    x = 1;
    y = 1;
    return (function(_this) {
      return function() {
        var dx, dy, rot;
        rot = Math.round(Math.random() * 4);
        if (x < 1) {
          dx = 1;
        } else if (x >= Math.floor($(window).width() / constants.SHAPE_SIZE)) {
          dx = -1;
        }
        if (y < 1) {
          dy = 1;
        } else if (y >= Math.floor($(window).height() / constants.SHAPE_SIZE)) {
          dy = -1;
        }
        if (dx == null) {
          dx = Math.round(Math.random() * 2) - 1;
        }
        if (dy == null) {
          dy = Math.round(Math.random() * 2) - 1;
        }
        if (_this.shapeExistsAtPosition(x + dx, y + dy)) {
          dx += 1;
        }
        x += dx;
        y += dy;
        return {
          x: x,
          y: y,
          rot: rot
        };
      };
    })(this);
  };

  Triad.prototype.tick = function() {
    var shape, toRemove;
    shape = this.generator();
    shape.el = this.drawTriange(shape);
    if (this.shapes.length > 25) {
      toRemove = this.shapes.pop();
      toRemove.el.remove();
    }
    this.shapes.unshift(shape);
    return _.delay(this.tick, constants.TICK_MS);
  };

  Triad.prototype.drawTriange = function(_arg) {
    var rot, size, triangle, x, y;
    x = _arg.x, y = _arg.y, size = _arg.size, rot = _arg.rot;
    if (size == null) {
      size = constants.SHAPE_SIZE;
    }
    triangle = this.svg.append("path").attr('d', function(d) {
      return "M " + (x * size) + " " + (y * size) + " l " + size + " " + size + " l -" + size + " 0 z";
    }).style('fill', 'blue');
    if (rot > 0) {
      triangle.attr('transform', "rotate(" + (rot * 90) + ", " + (x * size + size / 2) + ", " + (y * +size + size / 2) + ")");
    }
    return triangle.transition().style('opacity', 0).duration(constants.FADE_MS);
  };

  Triad.prototype.shapeExistsAtPosition = function(x, y) {
    var conflicts;
    conflicts = this.shapes.filter(function(shape) {
      return shape.x === x && shape.y === y;
    });
    return conflicts.length > 0;
  };

  return Triad;

})();

module.exports = Triad;



},{"./constants.coffee":2}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
